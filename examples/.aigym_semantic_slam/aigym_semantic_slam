#!/usr/bin/env python3

# Demo agent for passive mode that explicitly uses the "OpenAI Gym" style of
# employing an agent to solve tasks (see https://gym.openai.com/). Observations
# are visualised by the agent at the completion of each action.

import json

from benchbot_api import ActionResult, Agent, BenchBot, RESULT_LOCATION


class AiGymAgent(Agent):
    def is_done(self, action_result):
        # Finish when we are out of poses or we collide
        return (action_result == ActionResult.FINISHED
                or action_result == ActionResult.COLLISION)

    def pick_action(self, observations, action_list):
        # Always move to next
        return 'move_next', {}

    def save_result(self, filename, empty_results, results_format_fns):
        # We have no results, lets save the empty results with a message
        empty_results['aigym'] = 'Generated by aigym_semantic_slam'
        with open(filename, 'w') as f:
            json.dump(empty_results, f)


if __name__ == '__main__':
    # Start BenchBot, establish a connection to the simulator, & reset the
    # episode
    bb = BenchBot()
    observations, action_result = bb.reset()

    # Bail if our configuration seems invalid
    if 'move_next' not in bb.actions:
        raise ValueError(
            "There's no 'move_next' action available, please run "
            "this example again in a task with passive actuation.")
    if ('scene_count' in bb.config['task']
            and bb.config['task']['scene_count'] != 1):
        raise ValueError(
            "Semantic SLAM is expected, but this task doesn't use 1 scene. "
            "Are you sure you're running a semantic SLAM task?")

    # Use our Agent to run through the episode until completion
    a = AiGymAgent()
    while not a.is_done(action_result):
        action, action_args = a.pick_action(observations, bb.actions)
        observations, action_result = bb.step(action, **action_args)

    # When we are finished save our results
    # NOTE: you must save to the default RESULT_LOCATION as show below for your
    # code to work with the '-e' and '-r|--results-location' flags of the
    # 'benchbot_submit' script
    a.save_result(RESULT_LOCATION, bb.empty_results(), bb.results_functions())
