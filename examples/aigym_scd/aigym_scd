#!/usr/bin/env python3

# Demo agent for passive mode that explicitly uses the "OpenAI Gym" style of
# employing an agent to solve tasks (see https://gym.openai.com/). Observations
# are visualised by the agent at the completion of each action.

import json

from benchbot_api import ActionResult, Agent, BenchBot, RESULT_LOCATION


class AiGymAgent(Agent):

    def is_done(self, action_result):
        # Finish when we are out of poses or we collide
        return (action_result == ActionResult.FINISHED or
                action_result == ActionResult.COLLISION)

    def pick_action(self, observations, action_list):
        # Always move to next, but also show scene number is available
        print("Running in scene number: %s" % observations['scene_number'])
        return 'move_next', {}

    def save_result(self, filename, empty_results, empty_object_fn):
        # We have no results, lets save the empty results with a message
        empty_results['aigym'] = 'Generated by aigym_scd'
        with open(filename, 'w') as f:
            json.dump(empty_results, f)


if __name__ == '__main__':
    # Start BenchBot, & initialise our agent
    bb = BenchBot()
    a = AiGymAgent()

    # Use our Agent to run through the first scene until completion
    observations, action_result = bb.reset()
    while not a.is_done(action_result):
        action, action_args = a.pick_action(observations, bb.actions)
        observations, action_result = bb.step(action, **action_args)

    # Ask BenchBot to move us to the next scene
    bb.next_scene()

    # Run through the second scene until completion
    observations, action_result = bb.reset()
    while not a.is_done(action_result):
        action, action_args = a.pick_action(observations, bb.actions)
        observations, action_result = bb.step(action, **action_args)

    # When we are finished save our results
    # NOTE: you must save to the default RESULT_LOCATION as show below for your
    # code to work with the '-e' and '-r|--results-location' flags of the
    # 'benchbot_submit' script
    a.save_result(RESULT_LOCATION, bb.empty_results())
